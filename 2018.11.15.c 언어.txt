20181115
--------------------------------------------------

void func66() {
	for (long i = 0; i < 5; i++)
	{
		printf("%d \n", i);
		//#include<windows.h> 걸기

		Sleep(1000);
		//Sleep();
		//1초 : 1000ms이라 한다
		//프로그램의 진행이 1초 쉬었다 진행된다
	}
}

int main()
{
	func66();
}
--------------------------------------------------
//블로킹상태 : 특정 조건 때문에 프로그램이 더 이상 진행하지 못하고 조건을 충족하면 진행이 이어진다
//ex) scanf_s //Sleep //connect
void func67() {
	for (long i = 0; i < 5; i++)
	{
		printf("%d \n", i);
		Sleep(1000);
		system("cls");
		//콘솔 창을 지워버린다
	}
}
int main()
{
	func66();
}
--------------------------------------------------
void func68() {
	for (long i = 0; i < 5; i++)
	{
		//문자열 관리
		//모든 랭귀지는 일반적으로 문자열은 변경 혹은 조작할 수 없다
		const char *a = "apple";
		//a[0] = 'b'; 이렇게 갱신할 수 없다

		//문자 열 출력
		printf("%s\n", a); //apple
						   //문자 한자 한자 출력
		printf("%c %c\n", a[0], *(a + 4));//a e

		char b[] = "apple";
		//char b[] = "apple";//배열은 초기화할때 []크기 지정 안해도 된다
		//char b[5+1] = "apple";//apple이 어디서 끝나는지 마킹하기 위해 null을 사용-> +1을 더 쓴다
		//char b[6] = "apple";
		//메모리 NULL확인
		if (b[5] == NULL)
		{
			printf("1\n");
		}
		else
		{
			printf("2\n");

		}//1
	}
}

--------------------------------------------------
void func69() {
	////다차원배열
	int ar[5]; //일차원배열
	int br[2][5];//이차원배열 :5개짜리가 2개있다 ->10개 요구
	int cr[2][3][4];//삼차원배열 :4개짜리가 3개있다(12개) *2개 ->24개

	br[0][0] = 10;
	br[1][3] = 20;
	br[2][3] = 30;
	printf("%d %d %d\n", br[0][0], br[1][3], br[2][3]); //10 20 30

														//일반적으로 이차원배열을 사용할 땐 이중for문과 잘 쓰인다.
	for (long i = 0; i < 3; i++)
	{
		for (long j = 0; j < 4; j++)
		{
			printf("(%d %d) %d ", i, j, &br[i][j]);
		}printf("\n");
		//br[][]주소가 4씩 증가하는 거 확인
	}
}
--------------------------------------------------
void func70() 
{
	int br[3][4] = { 0 };//0으로 초기화
	int cr[3][4] = {
		//일반적으로 0으로 초기화하는 경우가 아닐 때
		10,20,30,40,
		50,60,70,80,
		90,80,70,60
		//이중 for문 모양에 맞춰 선언
	};

	for (long i = 0; i < 3; i++)
	{
		for (long j = 0; j < 4; j++)
		{
			//printf("%d ", br[i][j]);
			printf("%d ", cr[i][j]);
		}printf("\n");
		//br[][]주소가 4씩 증가하는 거 확인
	}
}
--------------------------------------------------
	void func71()
{
	int br[3][4] = { 0 };//0으로 초기화
	int cr[3][4] = {
		//일반적으로 0으로 초기화하는 경우가 아닐 때
		10,20,30,40,
		50,60,70,80,
		90,80,70,60
		//이중 for문 모양에 맞춰 선언
	};

	//정석 형태 : {}가 있음
	int dr[3][4] = {
		{ 10,20,30,40 },
	{ 50,60,70,80 },
	{ 90,80,70,60 }
	};

	//앞에[]은 생략 가능,뒤의 []생략 불가능
	int er[][4] = {
		10,20,30,40,
		50,60,70,80,
		90,80,70,60,
		90,80,70,60
	};

	for (long i = 0; i < 3; i++)
	{
		for (long j = 0; j < 4; j++)
		{
			//printf("%d ", br[i][j]);
			printf("%d ", cr[i][j]);
		}printf("\n");
		//br[][]주소가 4씩 증가하는 거 확인
	}
}
--------------------------------------------------
void func72() {
	//문자 이중배열
	char a[4 + 1] = "abcd";
	char b[5] = {
		'a','b','c','d','e'
		//하나씩 값을 넣을땐 'e'까지 넣을 수 있다
	};
	char c[3][4] = {
		'a','b','c','d',
		'e','f','g','h',
		'i','j','k','l'
	};
	char d[3][4 + 1] = {
		//char d[3][4]는 "abcd" 못쓴다
		//[3]은 생략 가능
		"abcd",
		"efgh",
		"ijkl"
	};
	for (long i = 0; i < 3; i++)
	{
		for (long j = 0; j < 4; j++)
		{
			printf("%c ", d[i][j]);
		}printf("\n");
	}
}
--------------------------------------------------
void func73() {

	int x = 2, y = 3;
	while (1)
	{
		char map[12][16 + 1] = {
			"################",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"################"
		};

		map[y][x] = 'O';
		//O가 대각선으로 이동함
		x++;
		y++;
		//배열의 범위를 넘어가면 터지게된다
		for (long i = 0; i < 12; i++)
		{
			for (long j = 0; j < 16; j++)
			{
				printf("%c ", map[i][j]);
			}printf("\n");
		}

		Sleep(700);
		system("cls");
	}
}
--------------------------------------------------
과제
--------------------------------------------------

#include "stdafx.h"
#include <iostream>
#include<time.h>
#include<windows.h>



void func73() {

	int x = 2, y = 3;
	while (1)
	{
		char map[12][16 + 1] = {
			"################",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"################"
		};

		map[y][x] = 'O';
		//O가 대각선으로 이동함
		
		x++;
		y++;
		//배열의 범위를 넘어가면 터지게된다
		for (long i = 0; i < 12; i++)
		{
			for (long j = 0; j < 16; j++)
			{
				printf("%c ", map[i][j]);
			}printf("\n");
		}

		Sleep(700);
		system("cls");
	}
}

int main()
{
	//for (long i = 0; i < 5; i++)
	//{
	//	printf("%d \n", i);
	//	Sleep(1000);
	//	system("cls");
	//	//같은 자리에서 출력이 진행된다
	//}

	int x = 2, y = 3;
	while(1)
	{
		char map[12][16 + 1] = {
			"################",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"################"
		};

		map[y][x] = 'O';
		if (x==15) {
			x--;
		}
		x++;
		
		

		for (long i = 0; i < 12; i++)
		{
			for (long j = 0; j < 16; j++)
			{
				printf("%c ", map[i][j]);
			}printf("\n");
		}
		Sleep(100);
		system("cls");


	}
}
	
	


--------------------------------------------------
연습 중
int main()
{
	//for (long i = 0; i < 5; i++)
	//{
	//	printf("%d \n", i);
	//	Sleep(1000);
	//	system("cls");
	//	//같은 자리에서 출력이 진행된다
	//}

	int x = 2, y = 3;
	while(1)
	{
		char map[12][16 + 1] = {
			"################",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"#..............#",
			"################"
		};

		map[y][x] = 'O';
		
		if (x==15) {
			x--;
			while (1) {
				x--;
				if (x==1) {
					break;
				}
		
			}
		}
		x++;
		
		

		for (long i = 0; i < 12; i++)
		{
			for (long j = 0; j < 16; j++)
			{
				printf("%c ", map[i][j]);
			}printf("\n");
		}
		Sleep(100);
		system("cls");


	}
}